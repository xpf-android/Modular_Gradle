apply plugin: 'com.android.application'


//1.打印信息
println("hello world!")
println"hello world!"
println'hello world!'
//效果一样：hello world!
println 666
//666

//2.变量的使用方式
//2.1直接使用
println username//xpf
//正确语法 ${rootProject.ext.username}
println "${rootProject.ext.username}"//xpf
//2.2间接使用(定义变量)
def name = rootProject.ext.username
println "name: " + name //name: xpf

//糖果语法，弱类型，类型可以推倒
rootProject.ext.username = 168
println username//168

// 这一段不写就是直接使用的方式，能够正常运行
// 定义变量的方式
def androidId = rootProject.ext.androidId
def appId = rootProject.ext.appId
def dependencies_impl = rootProject.ext.dependencies_impl

android {
    compileSdkVersion androidId.compileSdkVersion
    buildToolsVersion androidId.buildToolsVersion

    defaultConfig {
        applicationId appId.applicationId
        minSdkVersion androidId.minSdkVersion
        targetSdkVersion androidId.targetSdkVersion
        versionCode androidId.versionCode
        versionName androidId.versionName
        testInstrumentationRunner androidId.testInstrumentationRunner


        // 这个方法接收三个非空参数
        // 第一个参数：确定值的类型
        // 第二个参数：指定key的名称
        // 第三个参数：传值(必须是String)
        // 为什么定义这个参数？因为在src代码中可能需要跨模块交互，如果是组件化模式(开发环境)，模块间的交互
        // 相当于两个App交互，显然是行不通的，所以需要一个变量，通过它来判断当前的环境
        // 切记：不能在android节点下，只能在defaultConfig或buildTypes节点下
        // rebuild/build 之后，BuildConfig文件中就要boolean isRelease 属性了，可以通过它来判断运行环境
        buildConfigField("boolean", "isRelease", String.valueOf(isRelease))
    }


    buildTypes {
        debug {
            buildConfigField("String", "debug_url", "\"${url.debug_entrance}\"")
        }

        release {
            minifyEnabled false
            buildConfigField("String", "release_url", "\"${url.release_entrance}\"")
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }

}

/*dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])

    implementation dependencies_impl.appcompat
    implementation dependencies_impl.constraintlayout
    testImplementation dependencies_impl.junit
    androidTestImplementation dependencies_impl.test
    androidTestImplementation dependencies_impl.espresso
}*/

//dependencies里面的依赖引入方式，好比Map的形式，有key, value，循环遍历引入依赖
dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    dependencies_impl.each {k, v -> implementation v}
}
